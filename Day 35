3sum -> Leetcode 15

Illustration:
Input: nums = [-1,0,1,2,-1,-4]
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
The order of the output and the order of the triplets does not matter.
ans: [[-1,-1,2],[-1,0,1]]

Brute force solution:
T.C -> O(n^3), S.C -> O(n)
Set<List<Integer>> st = new HashSet<>();
int n = nums.length;
for (int i = 0; i < n; i++) {
    for (int j = i + 1; j < n; j++) {
        for (int k = j + 1; k < n; k++) {
            if (nums[i] + nums[j] + nums[k] == 0) {
                List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k]);
                temp.sort(null);
                st.add(temp);
            }
        }
    }
}
List<List<Integer>> ans = new ArrayList<>(st);
return ans;

Better solution:
T.C -> O(n^2), S.C -> O(n)
Set<List<Integer>> st = new HashSet<>();
int n = nums.length;

for (int i = 0; i < n; i++) {
    Set<Integer> hashset = new HashSet<>();
    for (int j = i + 1; j < n; j++) {
        int third = -(nums[i] + nums[j]);
        if (hashset.contains(third)) {
            List<Integer> temp = Arrays.asList(nums[i], nums[j], third);
            temp.sort(null);
            st.add(temp);
        }
        hashset.add(nums[j]);
    }
}
List<List<Integer>> ans = new ArrayList<>(st);
return ans;
