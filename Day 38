Reverse Words in a String -> Leetcode 151

Illustration:
1. s = "the sky is blue"
ans: "blue is sky the"
2. s = "  hello world  "
Your reversed string should not contain leading or trailing spaces.
ans: "world hello"
3. s = "a good   example"
You need to reduce multiple spaces between two words to a single space in the reversed string.
ans: "example good a"

Solution 1: Two pointer
T.C -> O(n), S.C -> O(n)
Approach: use two pointers I and j to find each word, add it to the result list, then reverse the result list, and finally concatenate it into a string.
List<String> words = new ArrayList<>();
int n = s.length();
for (int i = 0; i < n;) {
    while (i < n && s.charAt(i) == ' ') {
        ++i;
    }
    if (i < n) {
        StringBuilder t = new StringBuilder();
        int j = i;
        while (j < n && s.charAt(j) != ' ') {
            t.append(s.charAt(j++));
        }
        words.add(t.toString());
        i = j;
    }
}
Collections.reverse(words);
return String.join(" ", words);

Solution 2: 
T.C -> O(n), S.C -> O(n)
Approach: use the built-in string split function to split the string into a list of words by spaces, then reverse the list, and finally concatenate it into a string.
List<String> words = Arrays.asList(s.trim().split("\\s+"));
Collections.reverse(words);
return String.join(" ", words);
