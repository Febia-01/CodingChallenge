Sliding Window Maximum -> Leetcode 239

Illustration:
nums = [1,3,-1,-3,5,3,6,7], k = 3
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
ans: [3,3,5,5,6,7] 

Brute force solution:
T.C -> O(n^2), S.C -> O(k)
public int[] maxSlidingWindow(int[] nums, int k) {
     int left = 0, right = 0;
     ArrayList<Integer> maxx = new ArrayList<>();
     while (right < k - 1) {
         right++;
     }
     
     while (right < nums.length) {
         GetMax(nums, left, right, maxx); 
         left++;
         right++;
     }
     int[] result = new int[maxx.size()];
     for (int i = 0; i < maxx.size(); i++) {
         result[i] = maxx.get(i);
     }
     
     return result;
 }
 public void GetMax(int arr[], int l, int r, ArrayList < Integer > maxx) {
     int i, maxi = Integer.MIN_VALUE;
     for (i = l; i <= r; i++)
         maxi = Math.max(maxi, arr[i]);
     maxx.add(maxi);
 }

Optimized solution:
T.C -> O(n), S.C -> O(k)
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        int[] r = new int[n - k + 1];
        int ri = 0;
        Deque <Integer> q = new ArrayDeque <>();
        for (int i = 0; i < nums.length; i++) {
            if (!q.isEmpty() && q.peek() == i - k) {
                q.poll();
            }
            while (!q.isEmpty() && nums[q.peekLast()] < nums[i]) {
                q.pollLast();
            }

            q.offer(i);
            if (i >= k - 1) {
                r[ri++] = nums[q.peek()];
            }
        }
        return r;
    }
}
