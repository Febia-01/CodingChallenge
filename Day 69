Minimum Cost to Cut a Stick -> Leetcode 1547

Illustration:
n = 7, cuts = [1,3,4,5]
ans: 16

Solution 1:
Arrays.sort(cuts);
int m = cuts.length;
int[][] dp = new int[m + 2][m + 2];

for (int l = 2; l <= m + 1; l++) {
    for (int i = 0; i + l <= m + 1; i++) {
        int j = i + l;
        dp[i][j] = Integer.MAX_VALUE;
        for (int k = i + 1; k < j; k++) {
            dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j]);
        }
        int left = (i == 0) ? 0 : cuts[i - 1];
        int right = (j == m + 1) ? n : cuts[j - 1];
        dp[i][j] += right - left;
    }
}

return dp[0][m + 1];

Solution 2: 
class Solution {
    public int minCost(int n, int[] cuts) {
        List<Integer> nums = new ArrayList<>();
        for (int x : cuts) {
            nums.add(x);
        }
        nums.add(0);
        nums.add(n);
        Collections.sort(nums);
        int m = nums.size();
        int[][] f = new int[m][m];
        for (int l = 2; l < m; ++l) {
            for (int i = 0; i + l < m; ++i) {
                int j = i + l;
                f[i][j] = 1 << 30;
                for (int k = i + 1; k < j; ++k) {
                    f[i][j] = Math.min(f[i][j], f[i][k] + f[k][j] + nums.get(j) - nums.get(i));
                }
            }
        }
        return f[0][m - 1];
    }
}
