Min Stack -> Leetcode 155

Illustration:
Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

ans
[null,null,null,null,-3,null,0,-2]

Brute force solution:
T.C -> O(1), S.C -> O(n)
class MinStack {
    Stack < Pair > st;
    public MinStack() {
        st = new Stack < > ();
    }
    
    public void push(int val) {
        int min;
        if (st.isEmpty()) {
            min = val;
        } else {
            min = Math.min(st.peek().y, val);
        }
        st.push(new Pair(val, min));
    }
    
    public void pop() {
        st.pop();
    }
    
    public int top() {
        return st.peek().x;
    }
    
    public int getMin() {
        return st.peek().y;
    }
}
class Pair {
    int x, y;
    Pair(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
