Search in Rotated Sorted Array -> Leetcode 33

Illustration:
1. nums = [4,5,6,7,0,1,2], target = 0
ans: 4
2. nums = [4,5,6,7,0,1,2], target = 3
ans: -1

Brute force solution:
Linear search
T.C -> O(n), S.C -> O(1)
int n = nums.length;
for(int i = 0; i < n; i++){
    if(target == nums[i]){
        return i;
    }
}
return -1;

Optimized solution:
Binary search
T.C -> O(log n), S.C -> O(1)
class Solution {
    public int search(int[] nums, int target) {        
        int n = nums.length;
        int low = 0, high = n-1;        
        while(low <= high){            
            int mid = low + (high - low) / 2;           
            if(target == nums[mid]) 
                return mid;            
            if(nums[low] <= nums[mid]){
                if(nums[low] <= target && nums[mid] >= target){
                    high = mid - 1;
                }
                else{
                    low = mid + 1;
                }
            }
            else{
                if(nums[mid] <= target && nums[high] >= target){
                    low = mid + 1;
                }
                else{
                    high = mid - 1;
                }
            }
        }
        return -1;   
    }
}
