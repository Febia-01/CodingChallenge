Majority Element II -> Leetcode 229

Illustration:
arr[] = [1,1,1,3,3,2,2,2] n = 8
8/3 = 2, minimum the element should appear more than 2 times
Observation -> At max, there will be 2 elements which appear greater than n/3 times
ans = [1,2]

Brute force solution:
- Take an empty list with 2 elements
- Take one and traverse in the array, if present count++
- Check if it is greater than n/3
- If yes return and check for other elements
T.C -> O(n^2), S.C -> O(1)
List<Integer> list = new ArrayList<>()
for(i 0 - n-1){
    if(list.size() == 0 || list[0] != arr[i]){
        count = 0
        for(j 0 - n-1){
            if(arr[i] == arr[j])
            count++
        }
    }
    if(count>n/3)
        list.add(arr[i])
    if(list.size() == 2)
        break;
}
return list;

Better solution:
- Hashing
- Rather than doing iteration (2 times) through array and map, do it in one go
T.C -> O(n), S.C -> O(n)
List<Integer> ls = new ArrayList<>();
HashMap<Integer, Integer> mpp = new HashMap<>();
int mini = (int)(n / 3) + 1;
for (int i = 0; i < n; i++) {
    int value = mpp.getOrDefault(v[i], 0);
    mpp.put(v[i], value + 1);
    if (mpp.get(v[i]) == mini) {
        ls.add(v[i]);
    }
    if (ls.size() == 2) break;
}
return ls;

Optimal solution:
- Voting algorithm
- Initialize 4 variables:
    cnt1 & cnt2 –  for tracking the counts of elements
    el1 & el2 – for storing the majority of elements.
- Traverse through the given array.
    If cnt1 is 0 and the current element is not el2 then store the current element of the array as el1 along with increasing the cnt1 value by 1.
    If cnt2 is 0 and the current element is not el1 then store the current element of the array as el2 along with increasing the cnt2 value by 1.
    If the current element and el1 are the same increase the cnt1 by 1.
    If the current element and el2 are the same increase the cnt2 by 1.
    Other than all the above cases: decrease cnt1 and cnt2 by 1.
- The integers present in el1 & el2 should be the result we are expecting. So, using another loop, we will manually check their counts if they are greater than the floor(N/3).
T.C -> O(2n), S.C -> O(1)
class Solution {
    public List<Integer> majorityElement(int[] nums) {

        int n = nums.length; 

        int count1 = 0, count2 = 0; 
        int ele1 = Integer.MIN_VALUE; 
        int ele2 = Integer.MIN_VALUE; 

        for (int i = 0; i < n; i++) {
            if (count1 == 0 && ele2 != nums[i]) {
                count1 = 1;
                ele1 = nums[i];
            } else if (count2 == 0 && ele1 != nums[i]) {
                count2 = 1;
                ele2 = nums[i];
            } else if (nums[i] == ele1) count1++;
            else if (nums[i] == ele2) count2++;
            else {
                count1--; count2--;
            }
        }

        List<Integer> list = new ArrayList<>(); 

        
        count1 = 0; count2 = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == ele1) count1++;
            if (nums[i] == ele2) count2++;
        }

        int min = (int)(n / 3) + 1;
        if (count1 >= min) list.add(ele1);
        if (count2 >= min) list.add(ele2);

        Collections.sort(list); 

        return list;
        
    }
}
