Median of Two Sorted Arrays -> Leetcode 4

Illustration:
1. nums1 = [1,3], nums2 = [2]
merged array = [1,2,3] and median is 2.
ans: 2.00000
2. nums1 = [1,2], nums2 = [3,4]
merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
ans: 2.50000

Brute force solution:
- Take a third array and merge the two arrays
- If even number of elements, ele1 = n/2 and ele2 = n/2 - 1 and median = (ele1 + ele2)/2
- If odd number of elements, median = n/2
T.C -> O(n1+ n2), S.C -> O(n1 + n2)
int i = 0, j = 0;
int n1 = nums1.length, n2 = nums2.length;
int n = n1 + n2;
List<Integer> arr3 = new ArrayList<>();
while(i < n1 && j < n2){
    if(nums1[i] < nums2[j]){
        arr3.add(nums1[i++]);
    }
    else{
        arr3.add(nums2[j++]);
    }
}
while(i < n1){
    arr3.add(nums1[i++]);
}
while(j < n2){
    arr3.add(nums2[j++]);
}
if(n%2==1) return (double)(arr3.get(n/2));
else return (double)(arr3.get(n/2)+arr3.get((n/2)-1))/2.0;

Better solution:
- without taking the third element the comparison done hypothetically.
- only the needed elements in the middle index are taken and median is found.
T.C -> O(n1 + n2), S.C -> O(1)
int n1 = nums1.length;
int n2 = nums2.length;

int n = n1 + n2; 
int ind2 = n / 2;
int ind1 = ind2 - 1;
int cnt = 0;
int ele1 = -1, ele2 = -1;

int i = 0, j = 0;
while (i < n1 && j < n2) {
    if (nums1[i] < nums2[j]) {
        if (cnt == ind1) ele1 = nums1[i];
        if (cnt == ind2) ele2 = nums1[i];
        cnt++;
        i++;
    } else {
        if (cnt == ind1) ele1 = nums2[j];
        if (cnt == ind2) ele2 = nums2[j];
        cnt++;
        j++;
    }
}

while (i < n1) {
    if (cnt == ind1) ele1 = nums1[i];
    if (cnt == ind2) ele2 = nums1[i];
    cnt++;
    i++;
}
while (j < n2) {
    if (cnt == ind1) ele1 = nums2[j];
    if (cnt == ind2) ele2 = nums2[j];
    cnt++;
    j++;
}

if (n % 2 == 1) {
    return (double)ele2;
}

return (double)((double)(ele1 + ele2)) / 2.0;
