Implement Queue using Stacks -> Leetcode 232

Illustration:
Input
["MyQueue", "push", "push", "peek", "pop", "empty"]
[[], [1], [2], [], [], []]

MyQueue myQueue = new MyQueue();
myQueue.push(1); // queue is: [1]
myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
myQueue.peek(); // return 1
myQueue.pop(); // return 1, queue is [2]
myQueue.empty(); // return false

Answer
[null, null, null, 1, 1, false]

Solution 1:
Using two Stacks where push operation is O(N)
T.C -> O(n), S.C -> O(2n)
Stack < Integer > input = new Stack < > ();
Stack < Integer > output = new Stack < > ();
public MyQueue() {
}
public void push(int x) {
    while (input.empty() == false) {
        output.push(input.peek());
        input.pop();
    }
    System.out.println("The element pushed is " + x);
    input.push(x);
    while (output.empty() == false) {
        input.push(output.peek());
        output.pop();
    }
}
public int pop() {
    if (input.empty()) {
        System.out.println("Stack is empty");
    }
    int val = input.peek();
    input.pop();
    return val;
}
public int peek() {
    if (input.empty()) {
        System.out.println("Stack is empty");
    }
    return input.peek();
}
public boolean empty() {
    if(input.size()==0)
        return true;
    else 
        return false;
}

Solution 2:
Using two Stacks where push operation is O(1)
T.C -> O(1), S.C -> O(2n)
class MyQueue {
    Stack <Integer> input = new Stack <>();
    Stack <Integer> output = new Stack <>();
    public MyQueue() {
    }
    public void push(int x) {
        input.push(x);
    }
    public int pop() {
        if (output.empty())
            while (input.empty() == false) {
                output.push(input.peek());
                input.pop();
            }
        int x = output.peek();
        output.pop();
        return x;
    } 
    public int peek() {
        if (output.empty())
            while (input.empty() == false) {
                output.push(input.peek());
                input.pop();
            }
        return output.peek();
    }  
    public boolean empty() {
        return input.empty() && output.empty();
    }
}
