Word Break -> Leetcode 139

Illustration:
s = "leetcode", wordDict = ["leet","code"]
Return true because "leetcode" can be segmented as "leet code".
ans: true

Solution 1: 
- Top-down (String)
public boolean wordBreak(String s, List<String> wordDict) {
    return wordBreak(s, new HashSet<>(wordDict), new HashMap<>());
}
private boolean wordBreak(final String s, Set<String> wordSet, Map<String, Boolean> mem) {
    if (mem.containsKey(s))
        return mem.get(s);
    if (wordSet.contains(s)) {
        mem.put(s, true);
        return true;
    }

    for (int i = 1; i < s.length(); ++i) {
        final String prefix = s.substring(0, i);
        final String suffix = s.substring(i);
        if (wordSet.contains(prefix) && wordBreak(suffix, wordSet, mem)) {
            mem.put(s, true);
            return true;
        }
    }

    mem.put(s, false);
    return false;
}

Solution 2: 
- Top-down (index)
public boolean wordBreak(String s, List<String> wordDict) {
    return wordBreak(s, 0, new HashSet<>(wordDict), new Boolean[s.length()]);
}
private boolean wordBreak(final String s, int i, Set<String> wordSet, Boolean[] mem) {
    if (i == s.length())
    return true;
    if (mem[i] != null)
    return mem[i];

    for (int j = i + 1; j <= s.length(); ++j)
    if (wordSet.contains(s.substring(i, j)) && wordBreak(s, j, wordSet, mem))
        return mem[i] = true;

    return mem[i] = false;
}

Solution 3: 
- Bottom-up
final int n = s.length();
Set<String> wordSet = new HashSet<>(wordDict);
boolean[] dp = new boolean[n + 1];
dp[0] = true;

for (int i = 1; i <= n; ++i){
    for (int j = 0; j < i; ++j){
        if (dp[j] && wordSet.contains(s.substring(j, i))) {
            dp[i] = true;
            break;
        }
    }
}
return dp[n];
