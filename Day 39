Longest Palindromic Substring -> Leetcode 5 

Illustration:
Input: s = "babad"
"aba" is also a valid answer.
ans: "bab"

Brute force solution:
T.C -> O(n^3), S.C -> O(1)
if (s == null || s.length() < 1) return "";
int n = s.length();
String longest = "";
for (int i = 0; i < n; i++) {
    for (int j = i; j < n; j++) {
        if (isPalindrome(s, i, j) && (j - i + 1) > longest.length()) {
            longest = s.substring(i, j + 1);
        }
    }
}
return longest;
private boolean isPalindrome(String s, int start, int end) {
    while (start < end) {
        if (s.charAt(start) != s.charAt(end)) {
            return false;
        }
        start++;
        end--;
    }
    return true;
}

Optimized Solution:
T.C -> O(n^2), S.C -> O(1)
class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";
        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);   // Odd length palindromes
            int len2 = expandAroundCenter(s, i, i + 1); // Even length palindromes
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }

    private int expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }
}
