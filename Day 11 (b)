4Sum -> Leetcode 18

Brute force solution:
- Taking four loops
* There may be a time limit exceeded error
T.C -> O(n^4), S.C -> O(no.quads) * 2
int n = nums.length; 
Set<List<Integer>> set = new HashSet<>();
for(int i=0;i<n;i++){
    for(int j=i+1;j<n;j++){
        for(int k=j+1;k<n;k++){
            for(int l=k+1;l<n;l++){
                long sum = (long)nums[i] + nums[j];
                sum += nums[k];
                sum += nums[l];

                if(sum == target){
                    List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);
                    Collections.sort(temp);
                    set.add(temp);
                }
            }
        }
    }
}
List<List<Integer>> ans = new ArrayList<>(set);
return ans;

Better solution:
- Taking 3 for loop
- We will add nums[i], nums[j] and nums[k] and then subtract it from the target
- All elements between j and k will be added to a set to avoid the duplication
T.C -> O(n^3) * O(logn), S.C -> O(n) + O(no. quads) * 2
int n = nums.length; 
Set<List<Integer>> set = new HashSet<>();
for(int i=0;i<n;i++){
    for(int j=i+1;j<n;j++){
        Set<Long> hashset = new HashSet<>();
        for(int k=j+1;k<n;k++){
            long sum = nums[i] + nums[j];
            sum += nums[k];
            long four = target - sum;
            if(hashset.contains(four)){
                List<Integer> temp = new ArrayList<>();
                temp.add(nums[i]);
                temp.add(nums[j]);
                temp.add(nums[k]);
                temp.add((int)four);
                temp.sort(Integer::compareTo);
                set.add(temp);
            }
            hashset.add((long)nums[k]);
        }
    }
}

List<List<Integer>> ans = new ArrayList<>(set);
return ans;

Optimal solution:
Note: In the better solution we took a set to take the list in sorted order. Now, we will not take any extra set we will sort the array first.
- Sort the array
- Fix i, j and use k and l as two pointers
- skip duplicates
- then shift j and then i and repeat the two pointer method.
T.C -> O(n^3), S.C -> O(no. quads)
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        
        int n = nums.length; 
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            for (int j = i + 1; j < n; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;
                int k = j + 1;
                int l = n - 1;
                while (k < l) {
                    long sum = nums[i];
                    sum += nums[j];
                    sum += nums[k];
                    sum += nums[l];
                    if (sum == target) {
                        List<Integer> temp = new ArrayList<>();
                        temp.add(nums[i]);
                        temp.add(nums[j]);
                        temp.add(nums[k]);
                        temp.add(nums[l]);
                        ans.add(temp);
                        k++;
                        l--;

                        while (k < l && nums[k] == nums[k - 1]) k++;
                        while (k < l && nums[l] == nums[l + 1]) l--;
                    } else if (sum < target) k++;
                    else l--;
                }
            }
        }

        return ans;
        
    }
}
