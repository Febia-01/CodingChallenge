Edit Distance -> Leetcode 72

Illustration:
Input: word1 = "horse", word2 = "ros"
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
ans: 3

Memorization approach:
T.C -> O(n*m), S.C -> O(n*m) + O(n+m)
public int minDistance(String word1, String word2) {
    int n = word1.length();
    int m = word2.length();

    int[][] dp = new int[n][m];
    for (int row[] : dp)
        Arrays.fill(row, -1);
    return editDistanceUtil(word1, word2, n - 1, m - 1, dp);
}
static int editDistanceUtil(String S1, String S2, int i, int j, int[][] dp) {
    if (i < 0)
        return j + 1;
    if (j < 0)
        return i + 1;

    if (dp[i][j] != -1)
        return dp[i][j];

    if (S1.charAt(i) == S2.charAt(j))
        return dp[i][j] = editDistanceUtil(S1, S2, i - 1, j - 1, dp);

    else
        return dp[i][j] = 1 + Math.min(editDistanceUtil(S1, S2, i - 1, j - 1, dp),
                Math.min(editDistanceUtil(S1, S2, i - 1, j, dp), editDistanceUtil(S1, S2, i, j - 1, dp)));
}

Tabulation approach:
T.C -> O(n*m), S.C -> O(n*m)
int n = word1.length();
int m = word2.length();

int[][] dp = new int[n + 1][m + 1];

for (int i = 0; i <= n; i++) {
    dp[i][0] = i;
}
for (int j = 0; j <= m; j++) {
    dp[0][j] = j;
}

for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++) {
        if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
            dp[i][j] = dp[i - 1][j - 1];
        } else {
            dp[i][j] = 1 + Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1]));
        }
    }
}

return dp[n][m];
