Longest Common Subsequence -> Leetcode 1143

Illustration:
text1 = "abcde", text2 = "ace" 
The longest common subsequence is "ace" and its length is 3.
ans: 3  

Memorization approach:
T.C -> O(n*m), S.C -> O(n*m) + O(n+m)
public int longestCommonSubsequence(String text1, String text2) {
    int n = text1.length();
    int m = text2.length();
    int dp[][] = new int[n][m];
    for (int rows[] : dp)
        Arrays.fill(rows, -1);
    return lcs(text1, text2, n - 1, m - 1, dp);
}
static int lcs(String text1, String text2, int ind1, int ind2, int[][] dp) {
    if (ind1 < 0 || ind2 < 0)
        return 0;
    if (dp[ind1][ind2] != -1)
        return dp[ind1][ind2];
    if (text1.charAt(ind1) == text2.charAt(ind2))
        return dp[ind1][ind2] = 1 + lcs(text1, text2, ind1 - 1, ind2 - 1, dp);
    else
        return dp[ind1][ind2] = Math.max(lcs(text1, text2, ind1, ind2 - 1, dp),lcs(text1, text2, ind1 - 1, ind2, dp));
}

Tabular approach:
T.C -> O(n*m), S.C -> O(n*m)
int n = text1.length();
int m = text2.length();
int dp[][] = new int[n + 1][m + 1];
for (int rows[] : dp)
    Arrays.fill(rows, -1);
for (int i = 0; i <= n; i++) {
    dp[i][0] = 0;
}
for (int i = 0; i <= m; i++) {
    dp[0][i] = 0;
}
for (int ind1 = 1; ind1 <= n; ind1++) {
    for (int ind2 = 1; ind2 <= m; ind2++) {
        if (text1.charAt(ind1 - 1) == text2.charAt(ind2 - 1))
            dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1];
        else
            dp[ind1][ind2] = Math.max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1]);
    }
}
return dp[n][m];
