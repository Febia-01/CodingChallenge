K most frequent elements -> Leetcode 347

Illustration:
nums = [1,1,1,2,2,3], k = 2
ans: [1,2]

Solution 1:
- Using min heap
T.C -> O(n log k), S.C -> O(n)
Map<Integer, Integer> frequencyMap = new HashMap<>();
for (int num : nums) {
    frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
}
PriorityQueue<Map.Entry<Integer, Integer>> minHeap = new PriorityQueue<>(
    (a, b) -> a.getValue() - b.getValue()
);
for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
    minHeap.add(entry);
    if (minHeap.size() > k) {
        minHeap.poll();
    }
}
int[] result = new int[k];
int i = 0;
while (!minHeap.isEmpty()) {
    result[i++] = minHeap.poll().getKey();
}

return result;

Solution 2:
- Bucket sort
T.C -> O(n), S.C -> O(n)
class Solution {
    public int[] topKFrequent(int[] nums, int k) {

        final int n = nums.length;
        List<Integer> ans = new ArrayList<>();
        List<Integer>[] bucket = new List[n + 1];
        Map<Integer, Integer> count = new HashMap<>();

        for (final int num : nums)
            count.merge(num, 1, Integer::sum);

        for (final int num : count.keySet()) {
            final int freq = count.get(num);
            if (bucket[freq] == null)
                bucket[freq] = new ArrayList<>();
            bucket[freq].add(num);
        }

        for (int freq = n; freq > 0; --freq) {
            if (bucket[freq] != null)
                ans.addAll(bucket[freq]);
            if (ans.size() == k)
                return ans.stream().mapToInt(Integer::intValue).toArray();
        }

        throw new IllegalArgumentException();
    }
}
