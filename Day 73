K most frequent elements -> Leetcode 347

Illustration:
nums = [1,1,1,2,2,3], k = 2
ans: [1,2]

Solution 1:
- Using min heap
T.C -> O(n log k), S.C -> O(n)
Map<Integer, Integer> frequencyMap = new HashMap<>();
for (int num : nums) {
    frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
}
PriorityQueue<Map.Entry<Integer, Integer>> minHeap = new PriorityQueue<>(
    (a, b) -> a.getValue() - b.getValue()
);
for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
    minHeap.add(entry);
    if (minHeap.size() > k) {
        minHeap.poll();
    }
}
int[] result = new int[k];
int i = 0;
while (!minHeap.isEmpty()) {
    result[i++] = minHeap.poll().getKey();
}

return result;
