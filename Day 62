Maximum Product Subarray -> Leetcode 152

Illustration:
nums = [2,3,-2,4]
[2,3] has the largest product 6.
ans: 6

Brute force solution:
T.C -> O(n^3), S.C -> O(1)
int result = Integer.MIN_VALUE;
for(int i=0;i<nums.length-1;i++) 
    for(int j=i+1;j<nums.length;j++) {
        int prod = 1;
        for(int k=i;k<=j;k++) 
            prod *= nums[k];
        result = Math.max(result,prod);
    }
return result; 

Better solution:
T.C -> O(n^2), S.C -> O(1)
int result = nums[0];
for(int i=0;i<nums.length-1;i++) {
    int p = nums[i];
    for(int j=i+1;j<nums.length;j++) {
        result = Math.max(result,p);
        p *= nums[j];
    }
    result = Math.max(result,p);
}
return result; 

Optimal approach 1:
T.C -> O(n), S.C -> O(1)
class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length; 
        int pre = 1, suff = 1;
        int ans = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            if (pre == 0) pre = 1;
            if (suff == 0) suff = 1;
            pre *= nums[i];
            suff *= nums[n - i - 1];
            ans = Math.max(ans, Math.max(pre, suff));
        }
        return ans;
    }
}

