Partition Equal Subset Sum -> Leetcode 416

Illustration:
nums = [1,5,11,5]
The array can be partitioned as [1, 5, 5] and [11].
ans: true

Approach 1: 2D DP
public boolean canPartition(int[] nums) {
    final int sum = Arrays.stream(nums).sum();
    if (sum % 2 == 1)
    return false;
    return knapsack(nums, sum / 2);
}
private boolean knapsack(int[] nums, int subsetSum) {
    final int n = nums.length;
    boolean[][] dp = new boolean[n + 1][subsetSum + 1];
    dp[0][0] = true;
    for (int i = 1; i <= n; ++i) {
    final int num = nums[i - 1];
    for (int j = 0; j <= subsetSum; ++j)
        if (j < num)
        dp[i][j] = dp[i - 1][j];
        else
        dp[i][j] = dp[i - 1][j] || dp[i - 1][j - num];
    }
    return dp[n][subsetSum];
}

Approach 2: 1D DP
class Solution {
    public boolean canPartition(int[] nums) {
        final int sum = Arrays.stream(nums).sum();
        if (sum % 2 == 1)
        return false;
        return knapsack(nums, sum / 2);
    }
    private boolean knapsack(int[] nums, int subsetSum) {
        boolean[] dp = new boolean[subsetSum + 1];
        dp[0] = true;
        for (final int num : nums)
        for (int i = subsetSum; i >= num; --i)
            dp[i] = dp[i] || dp[i - num];
        return dp[subsetSum];
    }
}
