Intersection of Two Linked Lists -> Leetcode 160

Brute force solution:
T.C -> O(m*n), S.C -> O(1)
while(headB != null) {
    ListNode temp = headA;
    while(temp != null) {
        if(temp == headB) return headB;
        temp = temp.next;
    }
    headB = headB.next;
}
return null;

Better Solution:
T.C -> O(m+n), S.C -> O(n)
HashSet<ListNode> st=new HashSet<>();
while(headA != null) {
st.add(headA);
headA = headA.next;
}
while(headB != null) {
    if(st.contains(headB)) return headB;
    headB = headB.next;
}
return null;

Optimal solution:
T.C -> O(2*max(length of list1,length of list2)), S.C -> O(1)
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode d1 = headA;
        ListNode d2 = headB;
        
        while(d1 != d2) {
            d1 = d1 == null? headB:d1.next;
            d2 = d2 == null? headA:d2.next;
        }
        
        return d1;
    }
}
