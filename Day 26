Linked List Cycle -> Leetcode 

Illustration:
Input: head = [3,2,0,-4], pos = 1
There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
Ans: true

Brute force solution:
T.C -> O(N * 2 * log(N)), S.C -> O(N) 
ListNode temp = head;
HashMap<ListNode, Integer> nodeMap = new HashMap<>();
while (temp != null) {
    if (nodeMap.containsKey(temp)) {
        return true;
    }
    nodeMap.put(temp, 1);
    temp = temp.next;
}
return false;

Optimal solution:
T.C -> O(N), S.C -> O(1)
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                return true;  
            }
        }
        return false;
    }
}
