Longest Common Prefix -> Leetcode 14

Illustration:
Input: strs = ["flower","flow","flight"]
ans: "fl"

Input: strs = ["dog","racecar","car"]
There is no common prefix among the input strings.
ans: ""

Solution:
1. Vertical scanning:
T.C -> O(n) S.C -> O(1)
if (strs == null || strs.length == 0) {
    return "";
}

for (int i = 0; i < strs[0].length(); i++) {
    char c = strs[0].charAt(i);
    for (int j = 1; j < strs.length; j++) {
        if (i == strs[j].length() || strs[j].charAt(i) != c) {
            return strs[0].substring(0, i);
        }
    }
}

return strs[0];

2. Horizontal scanning
T.C -> O(n) S.C -> O(1)
if (strs == null || strs.length == 0) {
    return "";
}

String prefix = strs[0];
for (int i = 1; i < strs.length; i++) {
    while (strs[i].indexOf(prefix) != 0) {
        prefix = prefix.substring(0, prefix.length() - 1);
        if (prefix.isEmpty()) {
            return "";
        }
    }
}

return prefix;

3. Divide and Conquer
T.C -> O(n) S.C -> O(mlogn)
class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) {
            return "";
        }
        return divideAndConquer(strs, 0, strs.length - 1);
    }
    private String divideAndConquer(String[] strs, int left, int right) {
        if (left == right) {
            return strs[left];
        }
        int mid = (left + right) / 2;
        String leftPrefix = divideAndConquer(strs, left, mid);
        String rightPrefix = divideAndConquer(strs, mid + 1, right);
        return commonPrefix(leftPrefix, rightPrefix);
    }
    private String commonPrefix(String left, String right) {
        int minLen = Math.min(left.length(), right.length());
        for (int i = 0; i < minLen; i++) {
            if (left.charAt(i) != right.charAt(i)) {
                return left.substring(0, i);
            }
        }
        return left.substring(0, minLen);
    }
}
