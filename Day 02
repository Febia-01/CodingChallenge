Pascal's Triangle -> Leetcode 118

1
1 1
1 2 1
1 3 3 1 
1 4 6 4 1

Basically, Pascal's triangle can be asked in 3 different ways 
1. Given row number and column number, tell the element at the place (R = 3, C = 3 -> ans = 6)
2. Print any nth row of Pascal's Triangle (n=5, 1 4 6 4 1)
3. Print Pascal triangle given n

So here in the question it's asked to print the PAscal's traingle. 
We use the 2nd question's generate row method and will compile these and return the required final list. There is naive approach that is brute force approach. But let's directly jump into optimal solution.
- Run a loop (row) 1 to n
- Inside the loop we will call generateRow() function and each row will be added to the final answer list.
  Function:
  * First element has to be stored as 1
  * Use loop (col) 1 to n-1. It will store the rest of the elements
  * We use formula (nCr) for printing element [ans*(row-col)/col]
  * The entire row will be stored and returned
- Finally return the answer list

class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ans = new ArrayList<>();
        for(int i=1;i<=numRows;i++){
            ans.add(generateRow(i));
        }
        return ans;
    }
    public static List<Integer> generateRow(int row){
        long ans = 1;
        List<Integer> ansRow = new ArrayList<>();
        ansRow.add((int)ans);
        for(int col=1;col<row;col++){
            ans = ans*(row-col);
            ans = ans/col;
            ansRow.add((int)ans);
        }
        return ansRow;
    }
}
