Balanced Binary Tree -> Leetcode 110

Illustration:
root = [3,9,20,null,null,15,7]
ans: true

Brute force solution:
T.C -> O(n^2), S.C -> O(1)
public boolean isBalanced(TreeNode root) {
    if (root == null) {
        return true;
    }
    int leftHeight = getHeight(root.left);
    int rightHeight = getHeight(root.right);
    if (Math.abs(leftHeight - rightHeight) <= 1 &&
        isBalanced(root.left) &&
        isBalanced(root.right)) {
        return true;
    }
    return false;
}
public int getHeight(TreeNode root) {
    if (root == null) {
        return 0;
    }
    int leftHeight = getHeight(root.left);
    int rightHeight = getHeight(root.right);
    return Math.max(leftHeight, rightHeight) + 1;
}

Optimal solution:
T.C -> O(n), S.C -> O(1)
class Solution {
    public boolean isBalanced(TreeNode root) {
        return dfsHeight(root) != -1;
    }
    public int dfsHeight(TreeNode root) {
        if (root == null) return 0;
        int leftHeight = dfsHeight(root.left);
        if (leftHeight == -1) 
            return -1;
        int rightHeight = dfsHeight(root.right);
        if (rightHeight == -1) 
            return -1;
        if (Math.abs(leftHeight - rightHeight) > 1)  
            return -1;
        return Math.max(leftHeight, rightHeight) + 1;
    }
}
