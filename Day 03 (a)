1. Next Permutation -> Leetcode 31

Illustration:
1,2,3 This can be arranged in 3! ways that is 6 ways. [123, 132, 213, 231, 312, 321]
Next to 312 is 321.
Next to 321 is 123.

Brute force solution:
- Generate all ways and sort it (Using recursion)
- Linear search for given input
- Return next to it
The time complexity will be nearly n!*n which is very high order.

Optimal solution:
- Longest prefix match [Find the break point]
- Find the next greater element and swap it with the breakpoint
- Then reverse the right half of the breakpoint
The time complexity is O(2n) we can ignore the constant. So it is O(n).

class Solution {
    public void nextPermutation(int[] nums) {
        int n = nums.length;

        
        int ind = -1; 
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                ind = i;
                break;
            }
        }
        
        if (ind == -1) {
            reverse(nums, 0, n - 1);
            return;
        }

        
        for (int i = n - 1; i > ind; i--) {
            if (nums[i] > nums[ind]) {
                int tmp = nums[i];
                nums[i] = nums[ind];
                nums[ind] = tmp;
                break;
            }
        }

        
        reverse(nums, ind + 1, n - 1);
    }

    public static void reverse(int[] arr, int left, int right) {
        while (left < right) {
            int tmp = arr[left];
            arr[left++] = arr[right];
            arr[right--] = tmp;
        }
    }
}
