Largest Rectangle in Histogram -> Leetcode 84

Illustration:
heights = [2,1,5,6,2,3]
The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
ans: 10

Brute force solution:
T.C -> O(n^2), S.C -> O(1)
int maxArea = 0;
int n = heights.length;
for (int i = 0; i < n; i++) {
    int minHeight = Integer.MAX_VALUE;
    for (int j = i; j < n; j++) {
        minHeight = Math.min(minHeight, heights[j]);
        maxArea = Math.max(maxArea, minHeight * (j - i + 1));
    }
}
return maxArea;

Optimized solution 1:
T.C -> O(n), S.C -> O(n)
int n = heights.length;
Stack < Integer > st = new Stack < > ();
int leftSmall[] = new int[n];
int rightSmall[] = new int[n];
for (int i = 0; i < n; i++) {
    while (!st.isEmpty() && heights[st.peek()] >= heights[i]) {
        st.pop();
    }

    if (st.isEmpty()) leftSmall[i] = 0;
    else leftSmall[i] = st.peek() + 1;
    st.push(i);
}
while (!st.isEmpty()) st.pop();

for (int i = n - 1; i >= 0; i--) {
    while (!st.isEmpty() && heights[st.peek()] >= heights[i]) {
        st.pop();
    }

    if (st.isEmpty()) rightSmall[i] = n - 1;
    else rightSmall[i] = st.peek() - 1;

    st.push(i);
}

int maxA = 0;
for (int i = 0; i < n; i++) {
    maxA = Math.max(maxA, heights[i] * (rightSmall[i] - leftSmall[i] + 1));
}
return maxA;

Optimized solution 2:
T.C -> O(n), S.C -> O(n)
class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack < Integer > st = new Stack < > ();
        int maxA = 0;
        int n = heights.length;
        for (int i = 0; i <= n; i++) {
            while (!st.empty() && (i == n || heights[st.peek()] >= heights[i])) {
                int height = heights[st.peek()];
                st.pop();
                int width;
                if (st.empty())
                    width = i;
                else
                    width = i - st.peek() - 1;
                maxA = Math.max(maxA, width * height);
            }
            st.push(i);
        }
        return maxA;
    }
}
