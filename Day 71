Kth Largest Element in an Array -> Leetcode 215

Illustration:
nums = [3,2,1,5,6,4], k = 2
ans: 5

Solution 1:
- Sorting the array
T.C -> O(nlogn), S.C -> O(1)
Arrays.sort(nums);
int n = nums.length;
return nums[n-k];

Solution 2:
- using heap
T.C -> O(k+(n-k)+log(k)), S.C -> O(k)
public int findKthLargest(int[] nums, int k) {
    PriorityQueue<Integer>pq= new PriorityQueue<>((a,b)->b-a);
    int n = nums.length  ;
    for (int i = 0; i < n; i++) {
        pq.add(nums[i])  ;
    }
    int f = k - 1 ;
    while (f > 0) {
        pq.remove()  ;
        f-- ;
    }
    return pq.peek();
}
private int kth_Smallest_MinHeap(int[] arr, int k) {
    PriorityQueue<Integer>pq= new PriorityQueue<>();
    int n = arr.length  ;
    for (int i = 0; i < n; i++) {
        pq.add(arr[i])  ;
    }
    int f = k - 1 ;
    while (f > 0) {
        pq.remove()  ;
        f-- ;
    }
    return pq.peek();
}

Solution 3: 
- Using Quickselect Algorithm
T.C -> O(n), S.C -> O(1)
class Solution {
    public int findKthLargest(int[] nums, int k) {
        int left = 0, right = nums.length - 1, kth;
        while (true) {
            int idx = partition(nums, left, right);
            if (idx == k - 1) {
                kth = nums[idx];
                break;
            }
            if (idx < k - 1) {
                left = idx + 1;
            } else {
                right = idx - 1;
            }
        }
        return kth;
    }
    private int partition(int[] arr, int left, int right) {
        int pivot = arr[left];
        int l = left + 1;
        int r = right;
        while (l <= r) {
            if (arr[l] < pivot && arr[r] > pivot) {
                int temp=arr[l];
                arr[l]=arr[r];
                arr[r]=temp;
                l++;
                r--;
            }
            if (arr[l] >= pivot) {
                l++;
            }
            if (arr[r] <= pivot) {
                r--;
            }
        }
        int temp2=arr[left];
                arr[left]=arr[r];
                arr[r]=temp2;
        return r;
    }
}
